-- Create the event containing the location of all bases.
function create_history_event_snapshot()
    local result = {type="snapshot", bases={}}
    for _,base in pairs(get_all_bases()) do
        local guid = base.getGUID()
        local pos = base.getPosition()
        local rot = base.getRotation()
        result.bases[guid] =  {
          position={x=pos.x, y=pos.y, z=pos.z},
          rotation={x=rot.x, y=rot.y, z=rot.z}
        }
        --print("y=", data.position.y)
        table.insert(result, data)
    end
    return result
end

-- Do the two history event snapshots have teh same content?
function is_history_snapshot_event_same(lhs,rhs)
  assert(lhs ~= nil)
  assert(lhs.type == "snapshot")
  if rhs == nil then
    return false
  end
  if lhs.type ~= rhs.type then
    return false
  end
  local lhs_nb_bases = tlen(lhs.bases)
  local rhs_nb_bases = tlen(rhs.bases)
  if lhs_nb_bases ~= rhs_nb_bases then
    print("nb_bases ", lhs_nb_bases, rhs_nb_bases)
    return false
  end
  for guid,lhs_base in pairs(lhs.bases) do
    rhs_base = rhs.bases[guid]
    if rhs_base == nil then
      print("base not found")
      return false
    end
    local lhs_pos = lhs_base.position
    local rhs_pos = rhs_base.position
    if lhs_pos.x ~= rhs_pos.x then
      print("pos x ", lhs_pos.x, ' ', rhs_pos.x)
      return false
    end
    if lhs_pos.y ~= rhs_pos.y then
      print("pos x ", lhs_pos.y, ' ', rhs_pos.y)
      return false
    end
    if lhs_pos.z ~= rhs_pos.z then
      print("pos x ", lhs_pos.z, ' ', rhs_pos.z)
      return false
    end
    local lhs_rot = lhs_base.rotation
    local rhs_rot = rhs_base.rotation
    if lhs_rot.x ~= rhs_rot.x then
      print("rot x ", lhs_rot.x, ' ', rhs_rot.x)
      return false
    end
    if lhs_rot.y ~= rhs_rot.y then
      print("rot y ", lhs_rot.y, ' ', rhs_rot.y)
      return false
    end
    if lhs_rot.z ~= rhs_rot.z then
      print("rot z ", lhs_rot.z, ' ', rhs_rot.z)
      return false
    end
  end
  print("History event is the same")
  return true
end

-- Restore the bases according to the snapshot
function apply_snapshot(snapshot)
  for guid,base_state in pairs(snapshot.bases) do
    local base = getObjectFromGUID(guid)
    if base == nil then
      print_error("Object no longer exists, was it deleted: " .. tostring(guid))
    else
      --print("base=", base)
      --print(base.getName())
      base.setPosition(base_state.position)
      base.setRotation(base_state.rotation)
    end
  end
  print("snapshot applied")
end



function do_record_snapshot()
   local snapshot = create_history_event_snapshot()
  if top ~= nil then
    for _,base in pairs(get_all_bases()) do
  local top = g_history_stack:current()
      local guid = base.getGUID()
      if snapshot.bases[guid] == top.bases[guid] then
        snapshot.bases[guid] = nil
      end
    end
  end
  if is_table_empty(snapshot.bases) then
    print("not differences in snapshot")
    return
  end
  g_history_stack:push(snapshot)
 print("snapshot saved ", g_history_stack:size())
end


-- When all the bases have stopped moving record a snapshot.
function record_snapshot_at_rest()
  while not are_all_bases_are_at_rest() do
     coroutine.yield(0)
  end
  print("bases are at rest")
  do_record_snapshot()
  return 1
end

-- Places an event for the current location of all bases on the
-- history stack
function history_record_snapshot()
  startLuaCoroutine(self, 'record_snapshot_at_rest')
end
